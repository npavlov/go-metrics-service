// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	domain "github.com/npavlov/go-metrics-service/internal/domain"
)

const GetAllMetrics = `-- name: GetAllMetrics :many
SELECT id, type, delta, value FROM mtr_metrics
`

func (q *Queries) GetAllMetrics(ctx context.Context) ([]MtrMetric, error) {
	rows, err := q.db.Query(ctx, GetAllMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MtrMetric
	for rows.Next() {
		var i MtrMetric
		if err := rows.Scan(
			&i.ID,
			&i.MType,
			&i.Delta,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetManyMetrics = `-- name: GetManyMetrics :many
SELECT id, type, delta, value FROM mtr_metrics
WHERE id = ANY($1::text[])
`

func (q *Queries) GetManyMetrics(ctx context.Context, dollar_1 []string) ([]MtrMetric, error) {
	rows, err := q.db.Query(ctx, GetManyMetrics, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MtrMetric
	for rows.Next() {
		var i MtrMetric
		if err := rows.Scan(
			&i.ID,
			&i.MType,
			&i.Delta,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMetric = `-- name: GetMetric :one
SELECT id, type, delta, value FROM mtr_metrics
WHERE id = $1
`

func (q *Queries) GetMetric(ctx context.Context, id domain.MetricName) (MtrMetric, error) {
	row := q.db.QueryRow(ctx, GetMetric, id)
	var i MtrMetric
	err := row.Scan(
		&i.ID,
		&i.MType,
		&i.Delta,
		&i.Value,
	)
	return i, err
}

const InsertMetric = `-- name: InsertMetric :exec
INSERT INTO mtr_metrics (id, type, delta, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id, type) DO NOTHING
`

type InsertMetricParams struct {
	ID    domain.MetricName `db:"id" json:"id" validate:"required"`
	MType domain.MetricType `db:"type" json:"type" validate:"required,oneof=counter gauge"`
	Delta *int64            `db:"delta" json:"delta"`
	Value *float64          `db:"value" json:"value"`
}

func (q *Queries) InsertMetric(ctx context.Context, arg InsertMetricParams) error {
	_, err := q.db.Exec(ctx, InsertMetric,
		arg.ID,
		arg.MType,
		arg.Delta,
		arg.Value,
	)
	return err
}

const UpdateMetric = `-- name: UpdateMetric :exec
UPDATE mtr_metrics
SET delta = $3, value = $4
WHERE id = $1 AND type = $2
`

type UpdateMetricParams struct {
	ID    domain.MetricName `db:"id" json:"id" validate:"required"`
	MType domain.MetricType `db:"type" json:"type" validate:"required,oneof=counter gauge"`
	Delta *int64            `db:"delta" json:"delta"`
	Value *float64          `db:"value" json:"value"`
}

func (q *Queries) UpdateMetric(ctx context.Context, arg UpdateMetricParams) error {
	_, err := q.db.Exec(ctx, UpdateMetric,
		arg.ID,
		arg.MType,
		arg.Delta,
		arg.Value,
	)
	return err
}

const UpsertMetric = `-- name: UpsertMetric :exec
INSERT INTO mtr_metrics (id, type, delta, value)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id, type) DO UPDATE
    SET delta = EXCLUDED.delta,
        value = EXCLUDED.value
`

type UpsertMetricParams struct {
	ID    domain.MetricName `db:"id" json:"id" validate:"required"`
	MType domain.MetricType `db:"type" json:"type" validate:"required,oneof=counter gauge"`
	Delta *int64            `db:"delta" json:"delta"`
	Value *float64          `db:"value" json:"value"`
}

func (q *Queries) UpsertMetric(ctx context.Context, arg UpsertMetricParams) error {
	_, err := q.db.Exec(ctx, UpsertMetric,
		arg.ID,
		arg.MType,
		arg.Delta,
		arg.Value,
	)
	return err
}
